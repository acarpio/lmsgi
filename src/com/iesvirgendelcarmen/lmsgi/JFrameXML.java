/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.iesvirgendelcarmen.lmsgi;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 * @author antonio
 */
public class JFrameXML extends javax.swing.JFrame {

    /**
     * Creates new form JFrameXML
     */
    public JFrameXML() {
        initComponents();
        // setLookAndFeel("javax.swing.plat.metal.MetalLookAndFeel");

        /*filter = new FileNameExtensionFilter("XML file", "xml", "XML");
        jFileChooserXML.addChoosableFileFilter(filter);
        jFileChooserXML.setFileFilter(filter);
        // AÑADIMOS OTRO FILTRO (PARA ARCHIVOS HTML)
        filter = new FileNameExtensionFilter("HTML file", "html", "htm");
        jFileChooserXML.addChoosableFileFilter(filter); */
        filterXML = new FileNameExtensionFilter("XML file", "xml", "XML");
        jFileChooserXML.addChoosableFileFilter(filterXML);
        
        filterHTML = new FileNameExtensionFilter("HTML file", "html", "htm");
        jFileChooserXML.addChoosableFileFilter(filterHTML);
        
        filterDTD = new FileNameExtensionFilter("DTD file", "dtd", "DTD");
        jFileChooserXML.addChoosableFileFilter(filterDTD);
        
        filterXSD = new FileNameExtensionFilter("XSD file", "xsd", "XSD");
        jFileChooserXML.addChoosableFileFilter(filterXSD);
        
        filterXSLT = new FileNameExtensionFilter("XSLT file", "xsl", "XSLT");
        jFileChooserXML.addChoosableFileFilter(filterXSLT);
        
        filterXQ = new FileNameExtensionFilter("xQuery", "xq", "XQ");
        jFileChooserXML.addChoosableFileFilter(filterXQ);

        // hacemos que al pulsar Intro al final de escribir la Expresión XPath en el jTextField
        // realice la misma acción que pulsando el botón Evaluar
        jTextFieldxPathXPath.addActionListener(l -> {
            if (!jTextFieldxPathXPath.getText().isEmpty()) {
                jTextAreaxPathResultadoXPath.setText(controller.xPathEvaluate(jTextFieldxPathXPath.getText()));
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooserXML = new javax.swing.JFileChooser();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanelValidarDTD = new javax.swing.JPanel();
        jLabelValidarDTD = new javax.swing.JLabel();
        jScrollPane9 = new javax.swing.JScrollPane();
        jTextAreaValidarDTDXML = new javax.swing.JTextArea();
        jButtonValidarDTDCargarXML = new javax.swing.JButton();
        jButtonValidarDTDCargarDTD = new javax.swing.JButton();
        jButtonValidarDTDValidar = new javax.swing.JButton();
        jButtonValidarDTDLimpiar = new javax.swing.JButton();
        jScrollPane10 = new javax.swing.JScrollPane();
        jTextAreaValidarDTDResultado = new javax.swing.JTextArea();
        jPanelValidarXSD = new javax.swing.JPanel();
        jLabelValidarXSD = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTextAreaValidarXSDXML = new javax.swing.JTextArea();
        jButtonValidarXSDCargarXML = new javax.swing.JButton();
        jButtonValidarXSDCargarXSD = new javax.swing.JButton();
        jButtonValidarXSDValidar = new javax.swing.JButton();
        jButtonValidarXSDLimpiar = new javax.swing.JButton();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTextAreaValidarXSDResultado = new javax.swing.JTextArea();
        jPanelxPath = new javax.swing.JPanel();
        jButtonxPathEvaluar = new javax.swing.JButton();
        jTextFieldxPathXPath = new javax.swing.JTextField();
        jButtonxPathCargarXML = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextAreaxPathXML = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextAreaxPathResultadoXPath = new javax.swing.JTextArea();
        jButtonxPathLimpiar = new javax.swing.JButton();
        jPanelXSLT = new javax.swing.JPanel();
        jButtonXSLTCargarXML = new javax.swing.JButton();
        jButtonXSLTCargarXSLT = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTextAreaXSLTXML = new javax.swing.JTextArea();
        jScrollPane11 = new javax.swing.JScrollPane();
        jTextAreaXSLTXSLT = new javax.swing.JTextArea();
        jButtonXSLTHTML = new javax.swing.JButton();
        jButtonXSLTEjecutar = new javax.swing.JButton();
        jButtonXSLTLimpiar = new javax.swing.JButton();
        jScrollPane12 = new javax.swing.JScrollPane();
        jTextAreaXSLTResultado = new javax.swing.JTextArea();
        jLabelXSLT = new javax.swing.JLabel();
        jPanelxQuery = new javax.swing.JPanel();
        jPanelAbout = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuFile = new javax.swing.JMenu();
        jMenuEdit = new javax.swing.JMenu();
        jMenuHelp = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabelValidarDTD.setText("Contenido del archivo XML");

        jTextAreaValidarDTDXML.setColumns(20);
        jTextAreaValidarDTDXML.setRows(5);
        jScrollPane9.setViewportView(jTextAreaValidarDTDXML);

        jButtonValidarDTDCargarXML.setText("Cargar XML");
        jButtonValidarDTDCargarXML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonValidarDTDCargarXMLActionPerformed(evt);
            }
        });

        jButtonValidarDTDCargarDTD.setText("Cargar DTD");
        jButtonValidarDTDCargarDTD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonValidarDTDCargarDTDActionPerformed(evt);
            }
        });

        jButtonValidarDTDValidar.setText("Validar");
        jButtonValidarDTDValidar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonValidarDTDValidarActionPerformed(evt);
            }
        });

        jButtonValidarDTDLimpiar.setText("Limpiar");
        jButtonValidarDTDLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonValidarDTDLimpiarActionPerformed(evt);
            }
        });

        jTextAreaValidarDTDResultado.setColumns(20);
        jTextAreaValidarDTDResultado.setRows(5);
        jScrollPane10.setViewportView(jTextAreaValidarDTDResultado);

        javax.swing.GroupLayout jPanelValidarDTDLayout = new javax.swing.GroupLayout(jPanelValidarDTD);
        jPanelValidarDTD.setLayout(jPanelValidarDTDLayout);
        jPanelValidarDTDLayout.setHorizontalGroup(
            jPanelValidarDTDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelValidarDTDLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelValidarDTDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane9)
                    .addGroup(jPanelValidarDTDLayout.createSequentialGroup()
                        .addComponent(jLabelValidarDTD)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanelValidarDTDLayout.createSequentialGroup()
                        .addGroup(jPanelValidarDTDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jButtonValidarDTDLimpiar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonValidarDTDValidar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonValidarDTDCargarDTD, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE)
                            .addComponent(jButtonValidarDTDCargarXML, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, 494, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanelValidarDTDLayout.setVerticalGroup(
            jPanelValidarDTDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelValidarDTDLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelValidarDTD)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelValidarDTDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelValidarDTDLayout.createSequentialGroup()
                        .addComponent(jButtonValidarDTDCargarXML)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonValidarDTDCargarDTD)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonValidarDTDValidar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonValidarDTDLimpiar)
                        .addGap(0, 81, Short.MAX_VALUE))
                    .addComponent(jScrollPane10))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Validar DTD", jPanelValidarDTD);

        jLabelValidarXSD.setText("Contenido del archivo XML");

        jTextAreaValidarXSDXML.setColumns(20);
        jTextAreaValidarXSDXML.setRows(5);
        jScrollPane7.setViewportView(jTextAreaValidarXSDXML);

        jButtonValidarXSDCargarXML.setText("Cargar XML");
        jButtonValidarXSDCargarXML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonValidarXSDCargarXMLActionPerformed(evt);
            }
        });

        jButtonValidarXSDCargarXSD.setText("Cargar XSD");
        jButtonValidarXSDCargarXSD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonValidarXSDCargarXSDActionPerformed(evt);
            }
        });

        jButtonValidarXSDValidar.setText("Validar");
        jButtonValidarXSDValidar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonValidarXSDValidarActionPerformed(evt);
            }
        });

        jButtonValidarXSDLimpiar.setText("Limpiar");
        jButtonValidarXSDLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonValidarXSDLimpiarActionPerformed(evt);
            }
        });

        jTextAreaValidarXSDResultado.setColumns(20);
        jTextAreaValidarXSDResultado.setRows(5);
        jScrollPane8.setViewportView(jTextAreaValidarXSDResultado);

        javax.swing.GroupLayout jPanelValidarXSDLayout = new javax.swing.GroupLayout(jPanelValidarXSD);
        jPanelValidarXSD.setLayout(jPanelValidarXSDLayout);
        jPanelValidarXSDLayout.setHorizontalGroup(
            jPanelValidarXSDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelValidarXSDLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelValidarXSDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane7)
                    .addGroup(jPanelValidarXSDLayout.createSequentialGroup()
                        .addComponent(jLabelValidarXSD)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanelValidarXSDLayout.createSequentialGroup()
                        .addGroup(jPanelValidarXSDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jButtonValidarXSDLimpiar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonValidarXSDValidar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonValidarXSDCargarXSD, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonValidarXSDCargarXML, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 494, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanelValidarXSDLayout.setVerticalGroup(
            jPanelValidarXSDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelValidarXSDLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelValidarXSD)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelValidarXSDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelValidarXSDLayout.createSequentialGroup()
                        .addComponent(jButtonValidarXSDCargarXML)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonValidarXSDCargarXSD)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonValidarXSDValidar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonValidarXSDLimpiar)
                        .addGap(0, 81, Short.MAX_VALUE))
                    .addComponent(jScrollPane8))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Validar XSD", jPanelValidarXSD);

        jButtonxPathEvaluar.setText("Evaluar");
        jButtonxPathEvaluar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonxPathEvaluarActionPerformed(evt);
            }
        });

        jTextFieldxPathXPath.setText("Expresión XPath");
        jTextFieldxPathXPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldxPathXPathActionPerformed(evt);
            }
        });

        jButtonxPathCargarXML.setText("Cargar XML");
        jButtonxPathCargarXML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonxPathCargarXMLActionPerformed(evt);
            }
        });

        jTextAreaxPathXML.setColumns(20);
        jTextAreaxPathXML.setRows(5);
        jScrollPane2.setViewportView(jTextAreaxPathXML);

        jTextAreaxPathResultadoXPath.setColumns(20);
        jTextAreaxPathResultadoXPath.setRows(5);
        jScrollPane3.setViewportView(jTextAreaxPathResultadoXPath);

        jButtonxPathLimpiar.setText("Limpiar");
        jButtonxPathLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonxPathLimpiarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelxPathLayout = new javax.swing.GroupLayout(jPanelxPath);
        jPanelxPath.setLayout(jPanelxPathLayout);
        jPanelxPathLayout.setHorizontalGroup(
            jPanelxPathLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelxPathLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelxPathLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jButtonxPathCargarXML, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE)
                    .addComponent(jButtonxPathEvaluar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonxPathLimpiar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelxPathLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldxPathXPath)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 494, Short.MAX_VALUE)
                    .addComponent(jScrollPane3))
                .addContainerGap())
        );
        jPanelxPathLayout.setVerticalGroup(
            jPanelxPathLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelxPathLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelxPathLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonxPathEvaluar)
                    .addComponent(jTextFieldxPathXPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelxPathLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelxPathLayout.createSequentialGroup()
                        .addComponent(jButtonxPathCargarXML)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonxPathLimpiar)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("xPath", jPanelxPath);

        jButtonXSLTCargarXML.setText("Cargar XML");
        jButtonXSLTCargarXML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonXSLTCargarXMLActionPerformed(evt);
            }
        });

        jButtonXSLTCargarXSLT.setText("Cargar XSLT");
        jButtonXSLTCargarXSLT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonXSLTCargarXSLTActionPerformed(evt);
            }
        });

        jTextAreaXSLTXML.setColumns(20);
        jTextAreaXSLTXML.setRows(5);
        jScrollPane6.setViewportView(jTextAreaXSLTXML);

        jTextAreaXSLTXSLT.setColumns(20);
        jTextAreaXSLTXSLT.setRows(5);
        jScrollPane11.setViewportView(jTextAreaXSLTXSLT);

        jButtonXSLTHTML.setText("HTML salida");
        jButtonXSLTHTML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonXSLTHTMLActionPerformed(evt);
            }
        });

        jButtonXSLTEjecutar.setText("Ejecutar");
        jButtonXSLTEjecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonXSLTEjecutarActionPerformed(evt);
            }
        });

        jButtonXSLTLimpiar.setText("LImpiar");
        jButtonXSLTLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonXSLTLimpiarActionPerformed(evt);
            }
        });

        jTextAreaXSLTResultado.setColumns(20);
        jTextAreaXSLTResultado.setRows(5);
        jScrollPane12.setViewportView(jTextAreaXSLTResultado);

        jLabelXSLT.setText("HTML salida");
        jLabelXSLT.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        javax.swing.GroupLayout jPanelXSLTLayout = new javax.swing.GroupLayout(jPanelXSLT);
        jPanelXSLT.setLayout(jPanelXSLTLayout);
        jPanelXSLTLayout.setHorizontalGroup(
            jPanelXSLTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelXSLTLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelXSLTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelXSLTLayout.createSequentialGroup()
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane11, javax.swing.GroupLayout.DEFAULT_SIZE, 305, Short.MAX_VALUE))
                    .addGroup(jPanelXSLTLayout.createSequentialGroup()
                        .addGroup(jPanelXSLTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelXSLTLayout.createSequentialGroup()
                                .addComponent(jButtonXSLTCargarXML, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(195, 195, 195)
                                .addComponent(jButtonXSLTCargarXSLT, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanelXSLTLayout.createSequentialGroup()
                                .addComponent(jButtonXSLTHTML, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonXSLTEjecutar, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonXSLTLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanelXSLTLayout.createSequentialGroup()
                        .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelXSLT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanelXSLTLayout.setVerticalGroup(
            jPanelXSLTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelXSLTLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelXSLTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonXSLTCargarXML)
                    .addComponent(jButtonXSLTCargarXSLT))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelXSLTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 183, Short.MAX_VALUE)
                    .addComponent(jScrollPane11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelXSLTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonXSLTHTML)
                    .addComponent(jButtonXSLTEjecutar)
                    .addComponent(jButtonXSLTLimpiar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelXSLTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane12, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)
                    .addComponent(jLabelXSLT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jTabbedPane1.addTab("XSLT", jPanelXSLT);

        javax.swing.GroupLayout jPanelxQueryLayout = new javax.swing.GroupLayout(jPanelxQuery);
        jPanelxQuery.setLayout(jPanelxQueryLayout);
        jPanelxQueryLayout.setHorizontalGroup(
            jPanelxQueryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 633, Short.MAX_VALUE)
        );
        jPanelxQueryLayout.setVerticalGroup(
            jPanelxQueryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 446, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("xQuery", jPanelxQuery);

        javax.swing.GroupLayout jPanelAboutLayout = new javax.swing.GroupLayout(jPanelAbout);
        jPanelAbout.setLayout(jPanelAboutLayout);
        jPanelAboutLayout.setHorizontalGroup(
            jPanelAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 633, Short.MAX_VALUE)
        );
        jPanelAboutLayout.setVerticalGroup(
            jPanelAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 446, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("About...", jPanelAbout);

        jMenuFile.setText("File");
        jMenuBar1.add(jMenuFile);

        jMenuEdit.setText("Edit");
        jMenuBar1.add(jMenuEdit);

        jMenuHelp.setText("Help");
        jMenuBar1.add(jMenuHelp);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldxPathXPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldxPathXPathActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldxPathXPathActionPerformed

    private void jButtonxPathCargarXMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonxPathCargarXMLActionPerformed
        jFileChooserXML.setFileFilter(filterXML);
        
        int returnVal = jFileChooserXML.showOpenDialog(JFrameXML.this);
        
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = jFileChooserXML.getSelectedFile();
            // log.append("Opening: " + file.getName() + "." + newline);

            // probamos a abrir un archivo XML y que en el jTextArea aparezca el nombre del archivo
            // jTextAreaxPathXML.setText(file.getName());
            // jTextAreaxPathXML.setText("Cargando archivo:\n"+file.getName());
            // cargamos en el jTextArea el contenido del archivo XML
            try {
                jTextAreaxPathXML.setText(
                        new String(Files.readAllBytes(file.toPath())));
                if (controller == null) {
                    controller = new Controller(file);
                } else {
                    controller.setFile(file);
                }
            } catch (IOException ex) {
                Logger.getLogger(JFrameXML.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            // log.append("Open command cancelled by user." + newline);
            JOptionPane.showMessageDialog(null, "Archivo no cargado", "Mensaje de error",
                    JOptionPane.ERROR_MESSAGE);
            if (JOptionPane.showConfirmDialog(null, "¿Desea salir de la aplicación?", "WARNING",
                    JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                System.exit(0);
            }
        }
        // log.setCaretPosition(log.getDocument().getLength());
    }//GEN-LAST:event_jButtonxPathCargarXMLActionPerformed

    private void jButtonxPathLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonxPathLimpiarActionPerformed
        // refrescamos el jTextField y los jTextArea
        jTextFieldxPathXPath.setText("Expresión XPath");
        jTextAreaxPathXML.setText("");
        jTextAreaxPathResultadoXPath.setText("");
    }//GEN-LAST:event_jButtonxPathLimpiarActionPerformed

    private void jButtonxPathEvaluarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonxPathEvaluarActionPerformed
        // llamamos a la función xPathEvaluate
        // nos aseguramos primero que el jTextField no sea vacío (que haya texto)
        if (!jTextFieldxPathXPath.getText().isEmpty()) {
            jTextAreaxPathResultadoXPath.setText(controller.xPathEvaluate(jTextFieldxPathXPath.getText()));
        }
    }//GEN-LAST:event_jButtonxPathEvaluarActionPerformed

    private void jButtonValidarXSDCargarXMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonValidarXSDCargarXMLActionPerformed
        jFileChooserXML.setFileFilter(filterXML);
        
        int returnVal = jFileChooserXML.showOpenDialog(JFrameXML.this);
        
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = jFileChooserXML.getSelectedFile();
            
            try {
                jTextAreaValidarXSDXML.setText(
                        new String(Files.readAllBytes(file.toPath())));
                if (controller == null) {
                    controller = new Controller(file);
                } else {
                    controller.setFile(file);
                }
            } catch (IOException ex) {
                Logger.getLogger(JFrameXML.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            // log.append("Open command cancelled by user." + newline);
            JOptionPane.showMessageDialog(null, "Archivo no cargado", "Mensaje de error",
                    JOptionPane.ERROR_MESSAGE);
            if (JOptionPane.showConfirmDialog(null, "¿Desea salir de la aplicación?", "WARNING",
                    JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                System.exit(0);
            }
        }
        // log.setCaretPosition(log.getDocument().getLength());
    }//GEN-LAST:event_jButtonValidarXSDCargarXMLActionPerformed

    private void jButtonValidarXSDCargarXSDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonValidarXSDCargarXSDActionPerformed
        jFileChooserXML.setFileFilter(filterXSD);
        
        int returnVal = jFileChooserXML.showOpenDialog(JFrameXML.this);
        
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = jFileChooserXML.getSelectedFile();
            
            try {
                jTextAreaValidarXSDResultado.setText(
                        new String(Files.readAllBytes(file.toPath())));
                if (controller == null) {
                    controller = new Controller(file);
                } else {
                    controller.setFileXSD(file);
                }
            } catch (IOException ex) {
                Logger.getLogger(JFrameXML.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            // log.append("Open command cancelled by user." + newline);
            JOptionPane.showMessageDialog(null, "Archivo no cargado", "Mensaje de error",
                    JOptionPane.ERROR_MESSAGE);
            if (JOptionPane.showConfirmDialog(null, "¿Desea salir de la aplicación?", "WARNING",
                    JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                System.exit(0);
            }
        }
        // log.setCaretPosition(log.getDocument().getLength());
    }//GEN-LAST:event_jButtonValidarXSDCargarXSDActionPerformed

    private void jButtonValidarDTDCargarXMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonValidarDTDCargarXMLActionPerformed
        jFileChooserXML.setFileFilter(filterXML);
        
        int returnVal = jFileChooserXML.showOpenDialog(JFrameXML.this);
        
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = jFileChooserXML.getSelectedFile();
            
            try {
                jTextAreaValidarDTDXML.setText(
                        new String(Files.readAllBytes(file.toPath())));
                if (controller == null) {
                    controller = new Controller(file);
                } else {
                    controller.setFile(file);
                }
            } catch (IOException ex) {
                Logger.getLogger(JFrameXML.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            // log.append("Open command cancelled by user." + newline);
            JOptionPane.showMessageDialog(null, "Archivo no cargado", "Mensaje de error",
                    JOptionPane.ERROR_MESSAGE);
            if (JOptionPane.showConfirmDialog(null, "¿Desea salir de la aplicación?", "WARNING",
                    JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                System.exit(0);
            }
        }
        // log.setCaretPosition(log.getDocument().getLength());
    }//GEN-LAST:event_jButtonValidarDTDCargarXMLActionPerformed

    private void jButtonValidarDTDCargarDTDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonValidarDTDCargarDTDActionPerformed
        jFileChooserXML.setFileFilter(filterDTD);
        
        int returnVal = jFileChooserXML.showOpenDialog(JFrameXML.this);
        
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = jFileChooserXML.getSelectedFile();
            
            try {
                jTextAreaValidarDTDResultado.setText(
                        new String(Files.readAllBytes(file.toPath())));
                if (controller == null) {
                    controller = new Controller(file);
                } else {
                    controller.setFileDTD(file);
                }
            } catch (IOException ex) {
                Logger.getLogger(JFrameXML.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            // log.append("Open command cancelled by user." + newline);
            JOptionPane.showMessageDialog(null, "Archivo no cargado", "Mensaje de error",
                    JOptionPane.ERROR_MESSAGE);
            if (JOptionPane.showConfirmDialog(null, "¿Desea salir de la aplicación?", "WARNING",
                    JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                System.exit(0);
            }            
        }
        // log.setCaretPosition(log.getDocument().getLength());
    }//GEN-LAST:event_jButtonValidarDTDCargarDTDActionPerformed

    private void jButtonValidarXSDLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonValidarXSDLimpiarActionPerformed
        jTextAreaValidarXSDXML.setText("");
        jTextAreaValidarXSDResultado.setText("");
    }//GEN-LAST:event_jButtonValidarXSDLimpiarActionPerformed

    private void jButtonValidarDTDLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonValidarDTDLimpiarActionPerformed
        jTextAreaValidarDTDXML.setText("");
        jTextAreaValidarDTDResultado.setText("");
    }//GEN-LAST:event_jButtonValidarDTDLimpiarActionPerformed

    private void jButtonValidarDTDValidarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonValidarDTDValidarActionPerformed
        jTextAreaValidarDTDResultado.setText(controller.validateDTD());
    }//GEN-LAST:event_jButtonValidarDTDValidarActionPerformed

    private void jButtonValidarXSDValidarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonValidarXSDValidarActionPerformed
        jTextAreaValidarXSDResultado.setText(controller.validateXSD());
    }//GEN-LAST:event_jButtonValidarXSDValidarActionPerformed

    private void jButtonXSLTCargarXSLTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonXSLTCargarXSLTActionPerformed
        jFileChooserXML.setFileFilter(filterXSLT);
        
        int returnVal = jFileChooserXML.showOpenDialog(JFrameXML.this);
        
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = jFileChooserXML.getSelectedFile();
            
            try {
                jTextAreaXSLTXSLT.setText(
                        new String(Files.readAllBytes(file.toPath())));
                if (controller == null) {
                    controller = new Controller(file);
                } else {
                    controller.setFileXSLT(file);
                }
            } catch (IOException ex) {
                Logger.getLogger(JFrameXML.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            // log.append("Open command cancelled by user." + newline);
            JOptionPane.showMessageDialog(null, "Archivo no cargado", "Mensaje de error",
                    JOptionPane.ERROR_MESSAGE);
            if (JOptionPane.showConfirmDialog(null, "¿Desea salir de la aplicación?", "WARNING",
                    JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                System.exit(0);
            }
        }
        // log.setCaretPosition(log.getDocument().getLength());
    }//GEN-LAST:event_jButtonXSLTCargarXSLTActionPerformed

    private void jButtonXSLTEjecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonXSLTEjecutarActionPerformed
        if (controller.save2XML(jTextAreaXSLTXML.getText())
                && controller.save2XSL(jTextAreaXSLTXSLT.getText())) {
            jTextAreaXSLTResultado.setText(controller.xsltTransform());
            jLabelXSLT.setText(jTextAreaXSLTResultado.getText());
        } else {
            jTextAreaXSLTResultado.setText("Error al guardar los archivos");
        }
    }//GEN-LAST:event_jButtonXSLTEjecutarActionPerformed

    private void jButtonXSLTCargarXMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonXSLTCargarXMLActionPerformed
        jFileChooserXML.setFileFilter(filterXML);
        
        int returnVal = jFileChooserXML.showOpenDialog(JFrameXML.this);
        
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = jFileChooserXML.getSelectedFile();
            
            try {
                jTextAreaXSLTXML.setText(
                        new String(Files.readAllBytes(file.toPath())));
                if (controller == null) {
                    controller = new Controller(file);
                } else {
                    controller.setFile(file);
                }
            } catch (IOException ex) {
                Logger.getLogger(JFrameXML.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            // log.append("Open command cancelled by user." + newline);
            JOptionPane.showMessageDialog(null, "Archivo no cargado", "Mensaje de error",
                    JOptionPane.ERROR_MESSAGE);
            if (JOptionPane.showConfirmDialog(null, "¿Desea salir de la aplicación?", "WARNING",
                    JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                System.exit(0);
            }
        }
        // log.setCaretPosition(log.getDocument().getLength())
    }//GEN-LAST:event_jButtonXSLTCargarXMLActionPerformed

    private void jButtonXSLTHTMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonXSLTHTMLActionPerformed
        jFileChooserXML.setFileFilter(filterHTML);
        
        int returnVal = jFileChooserXML.showSaveDialog(JFrameXML.this);
        
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = jFileChooserXML.getSelectedFile();
            if (controller == null) {
                controller = new Controller(file);
            } else {
                controller.setFileHTML(file);
            }
        } else {
            // log.append("Open command cancelled by user." + newline); 
        }
        // log.setCaretPosition(log.getDocument().getLength());
    }//GEN-LAST:event_jButtonXSLTHTMLActionPerformed

    private void jButtonXSLTLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonXSLTLimpiarActionPerformed
        jTextAreaXSLTXML.setText("");
        jTextAreaXSLTXSLT.setText("");
        jTextAreaXSLTResultado.setText("");
        jLabelXSLT.setText("HTML salida");
    }//GEN-LAST:event_jButtonXSLTLimpiarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFrameXML.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFrameXML.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFrameXML.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrameXML.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFrameXML().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonValidarDTDCargarDTD;
    private javax.swing.JButton jButtonValidarDTDCargarXML;
    private javax.swing.JButton jButtonValidarDTDLimpiar;
    private javax.swing.JButton jButtonValidarDTDValidar;
    private javax.swing.JButton jButtonValidarXSDCargarXML;
    private javax.swing.JButton jButtonValidarXSDCargarXSD;
    private javax.swing.JButton jButtonValidarXSDLimpiar;
    private javax.swing.JButton jButtonValidarXSDValidar;
    private javax.swing.JButton jButtonXSLTCargarXML;
    private javax.swing.JButton jButtonXSLTCargarXSLT;
    private javax.swing.JButton jButtonXSLTEjecutar;
    private javax.swing.JButton jButtonXSLTHTML;
    private javax.swing.JButton jButtonXSLTLimpiar;
    private javax.swing.JButton jButtonxPathCargarXML;
    private javax.swing.JButton jButtonxPathEvaluar;
    private javax.swing.JButton jButtonxPathLimpiar;
    private javax.swing.JFileChooser jFileChooserXML;
    private javax.swing.JLabel jLabelValidarDTD;
    private javax.swing.JLabel jLabelValidarXSD;
    private javax.swing.JLabel jLabelXSLT;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuEdit;
    private javax.swing.JMenu jMenuFile;
    private javax.swing.JMenu jMenuHelp;
    private javax.swing.JPanel jPanelAbout;
    private javax.swing.JPanel jPanelValidarDTD;
    private javax.swing.JPanel jPanelValidarXSD;
    private javax.swing.JPanel jPanelXSLT;
    private javax.swing.JPanel jPanelxPath;
    private javax.swing.JPanel jPanelxQuery;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextAreaValidarDTDResultado;
    private javax.swing.JTextArea jTextAreaValidarDTDXML;
    private javax.swing.JTextArea jTextAreaValidarXSDResultado;
    private javax.swing.JTextArea jTextAreaValidarXSDXML;
    private javax.swing.JTextArea jTextAreaXSLTResultado;
    private javax.swing.JTextArea jTextAreaXSLTXML;
    private javax.swing.JTextArea jTextAreaXSLTXSLT;
    private javax.swing.JTextArea jTextAreaxPathResultadoXPath;
    private javax.swing.JTextArea jTextAreaxPathXML;
    private javax.swing.JTextField jTextFieldxPathXPath;
    // End of variables declaration//GEN-END:variables

    private FileFilter filterXML, filterHTML, filterDTD, filterXSD, filterXSLT, filterXQ;
    
    private Controller controller;
}
